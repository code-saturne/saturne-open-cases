# -*- coding: iso-8859-1 -*-

#-------------------------------------------------------------------------------

# This file is part of the code_saturne test suite.
#
# Copyright (C) 1998-2022 EDF S.A.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
# Street, Fifth Floor, Boston, MA 02110-1301, USA.

#-------------------------------------------------------------------------------

### This file was generated automatically by SALOME v7.2.0 with
### dump python functionality

import sys
import salome

salome.salome_init()
theStudy = salome.myStudy

import salome_notebook
notebook = salome_notebook.NoteBook(theStudy)

####################################################
##       Begin of NoteBook variables section      ##
####################################################
# Geometry
notebook.set("radius", "21.7 * 0.001 / 2")
notebook.set("half_step", "45 * 0.001 / 2")
notebook.set("bl_thickness", "radius * 0.1")
notebook.set("bl_radius", "radius + bl_thickness")
notebook.set("sym_corner", "half_step * 0.55")
notebook.set("x_half_corner", "half_step * 0.7")
notebook.set("y_half_corner", "half_step - x_half_corner")
notebook.set("x_base_corner", "x_half_corner * 1.04")
notebook.set("y_base_corner", "half_step - x_base_corner")
notebook.set("x_prolong", "half_step * 0.1")
notebook.set("x_corner", "half_step + x_prolong")
notebook.set("y_near_quarter_step", "half_step * 0.6")
notebook.set("x_near_quarter_step", "half_step * 0.6")
notebook.set("x_base_corner_sym", "half_step - x_base_corner")
notebook.set("n_wall_1", 41)
notebook.set("n_wall_2", 41)
notebook.set("n_diag", 38)
notebook.set("n_boundary", 28)
notebook.set("mult_boundary", 2)
notebook.set("mult_diag", 2.5)
notebook.set("n_fill_1_bottom", 38)
notebook.set("n_half_corner", 12)
notebook.set("n_x_corner", "n_wall_1 + 10")
####################################################
##        End of NoteBook variables section       ##
####################################################
import iparameters
ipar = iparameters.IParameters(salome.myStudy.GetCommonParameters("Interface Applicative", 1))

#Set up visual properties:
ipar.setProperty("AP_ACTIVE_VIEW", "VTKViewer_0_0")
ipar.setProperty("AP_WORKSTACK_INFO", "000000010000000000000002010000000100000374000000040000000200000002000000080000001a00560054004b005600690065007700650072005f0030005f00300000000202000000080000001a004f00430043005600690065007700650072005f0031005f00300000000102")
ipar.setProperty("AP_ACTIVE_MODULE", "Mesh")
ipar.setProperty("AP_SAVEPOINT_NAME", "GUI state: 2")
#Set up lists:
# fill list AP_VIEWERS_LIST
ipar.append("AP_VIEWERS_LIST", "VTKViewer_1")
ipar.append("AP_VIEWERS_LIST", "OCCViewer_2")
ipar.append("AP_VIEWERS_LIST", "OCCViewer_3")
# fill list VTKViewer_1
ipar.append("VTKViewer_1", "VTK scene:1 - viewer:1")
ipar.append("VTKViewer_1", """<?xml version="1.0"?>
<ViewState>
    <Position X="0.00875384" Y="-0.00153457" Z="0.112944"/>
    <FocalPoint X="0.00875384" Y="-0.00153457" Z="0"/>
    <ViewUp X="0" Y="1" Z="0"/>
    <ViewScale Parallel="0.0273014" X="1" Y="1" Z="1"/>
    <DisplayCubeAxis Show="0"/>
    <GraduatedAxis Axis="X">
        <Title isVisible="1" Text="X" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="1" G="0" B="0"/>
        </Title>
        <Labels isVisible="1" Number="3" Offset="2" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="1" G="0" B="0"/>
        </Labels>
        <TickMarks isVisible="1" Length="5"/>
    </GraduatedAxis>
    <GraduatedAxis Axis="Y">
        <Title isVisible="1" Text="Y" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="1" B="0"/>
        </Title>
        <Labels isVisible="1" Number="3" Offset="2" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="1" B="0"/>
        </Labels>
        <TickMarks isVisible="1" Length="5"/>
    </GraduatedAxis>
    <GraduatedAxis Axis="Z">
        <Title isVisible="1" Text="Z" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="0" B="1"/>
        </Title>
        <Labels isVisible="1" Number="3" Offset="2" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="0" B="1"/>
        </Labels>
        <TickMarks isVisible="1" Length="5"/>
    </GraduatedAxis>
    <Trihedron isShown="0" Size="105"/>
</ViewState>
""")
# fill list OCCViewer_2
ipar.append("OCCViewer_2", "OCC scene:1 - viewer:1")
ipar.append("OCCViewer_2", "scale=1.000000000000e+00*centerX=0.000000000000e+00*centerY=0.000000000000e+00*projX=5.773502588272e-01*projY=-5.773502588272e-01*projZ=5.773502588272e-01*twist=0.000000000000e+00*atX=0.000000000000e+00*atY=0.000000000000e+00*atZ=0.000000000000e+00*eyeX=2.886751294136e+02*eyeY=-2.886751294136e+02*eyeZ=2.886751294136e+02*scaleX=1.000000000000e+00*scaleY=1.000000000000e+00*scaleZ=1.000000000000e+00*isVisible=1*size=100.00*gtIsVisible=0*gtDrawNameX=1*gtDrawNameY=1*gtDrawNameZ=1*gtNameX=X*gtNameY=Z*gtNameZ=Z*gtNameColorRX=255*gtNameColorGX=0*gtNameColorBX=0*gtNameColorRY=0*gtNameColorGY=255*gtNameColorBY=0*gtNameColorRZ=0*gtNameColorGZ=0*gtNameColorBZ=255*gtDrawValuesX=1*gtDrawValuesY=1*gtDrawValuesZ=1*gtNbValuesX=3*gtNbValuesY=3*gtNbValuesZ=3*gtOffsetX=2*gtOffsetY=2*gtOffsetZ=2*gtColorRX=255*gtColorGX=0*gtColorBX=0*gtColorRY=0*gtColorGY=255*gtColorBY=0*gtColorRZ=0*gtColorGZ=0*gtColorBZ=255*gtDrawTickmarksX=1*gtDrawTickmarksY=1*gtDrawTickmarksZ=1*gtTickmarkLengthX=5*gtTickmarkLengthY=5*gtTickmarkLengthZ=5")
# fill list OCCViewer_3
ipar.append("OCCViewer_3", "OCC scene:2 - viewer:1")
ipar.append("OCCViewer_3", "scale=7.827647750753e+04*centerX=3.374999863869e-03*centerY=1.912500024674e-02*projX=0.000000000000e+00*projY=0.000000000000e+00*projZ=1.000000000000e+00*twist=0.000000000000e+00*atX=0.000000000000e+00*atY=0.000000000000e+00*atZ=0.000000000000e+00*eyeX=0.000000000000e+00*eyeY=0.000000000000e+00*eyeZ=5.000000000000e+02*scaleX=1.000000000000e+00*scaleY=1.000000000000e+00*scaleZ=1.000000000000e+00*isVisible=1*size=0.01*gtIsVisible=0*gtDrawNameX=1*gtDrawNameY=1*gtDrawNameZ=1*gtNameX=X*gtNameY=Z*gtNameZ=Z*gtNameColorRX=255*gtNameColorGX=0*gtNameColorBX=0*gtNameColorRY=0*gtNameColorGY=255*gtNameColorBY=0*gtNameColorRZ=0*gtNameColorGZ=0*gtNameColorBZ=255*gtDrawValuesX=1*gtDrawValuesY=1*gtDrawValuesZ=1*gtNbValuesX=3*gtNbValuesY=3*gtNbValuesZ=3*gtOffsetX=2*gtOffsetY=2*gtOffsetZ=2*gtColorRX=255*gtColorGX=0*gtColorBX=0*gtColorRY=0*gtColorGY=255*gtColorBY=0*gtColorRZ=0*gtColorGZ=0*gtColorBZ=255*gtDrawTickmarksX=1*gtDrawTickmarksY=1*gtDrawTickmarksZ=1*gtTickmarkLengthX=5*gtTickmarkLengthY=5*gtTickmarkLengthZ=5")
# fill list AP_MODULES_LIST
ipar.append("AP_MODULES_LIST", "Geometry")
ipar.append("AP_MODULES_LIST", "Mesh")


###
### GEOM component
###

import GEOM
import math
import SALOMEDS

from salome.geom import geomBuilder
geompy = geomBuilder.New()

O = geompy.MakeVertex(0, 0, 0)
c01 = geompy.MakeVertex("radius", 0, 0)
c02 = geompy.MakeVertex(0, "radius", 0)
Arc_1 = geompy.MakeArcCenter(O, c01, c02,False)
c11 = geompy.MakeVertex("bl_radius", 0, 0)
c12 = geompy.MakeVertex(0, "bl_radius", 0)
corner_half = geompy.MakeVertex("sym_corner", "sym_corner", 0)
c21 = geompy.MakeVertex("x_base_corner", 0, 0)
c22 = geompy.MakeVertex("x_half_corner", "y_half_corner", 0)
c23 = geompy.MakeVertex("x_corner", "y_base_corner", 0)
c24 = geompy.MakeVertex("x_corner", 0, 0)
diag_cut = geompy.MakeLineTwoPnt(O, corner_half)
Arc_2 = geompy.MakeArcCenter(O, c11, c12,False)
c31 = geompy.MakeVertexOnLinesIntersection(Arc_1, diag_cut)
c32 = geompy.MakeVertexOnLinesIntersection(Arc_2, diag_cut)
diag_cut_2 = geompy.MakeLineTwoPnt(O, c22)
c41 = geompy.MakeVertexOnLinesIntersection(Arc_1, diag_cut_2)
c42 = geompy.MakeVertexOnLinesIntersection(Arc_2, diag_cut_2)
Arc_3 = geompy.MakeArcCenter(O, c01, c41,False)
Arc_4 = geompy.MakeArcCenter(O, c41, c31,False)
Arc_5 = geompy.MakeArcCenter(O, c11, c42,False)
Arc_6 = geompy.MakeArcCenter(O, c42, c32,False)
Line_2 = geompy.MakeLineTwoPnt(c21, c22)
Line_1 = geompy.MakeLineTwoPnt(c22, corner_half)
Boundary_1 = geompy.MakeQuad2Edges(Arc_3, Arc_5)
[geomObj_1,geomObj_2,geomObj_3] = geompy.SubShapes(Boundary_1, [6, 10, 2])
[geomObj_4] = geompy.SubShapes(Boundary_1, [3])
[geomObj_5] = geompy.SubShapeAll(Boundary_1, geompy.ShapeType["FACE"])
listSubShapeIDs = geompy.SubShapeAllIDs(Boundary_1, geompy.ShapeType["FACE"])
listSubShapeIDs = geompy.SubShapeAllIDs(Boundary_1, geompy.ShapeType["EDGE"])
[Edge_11] = geompy.SubShapes(Boundary_1, [10])
Fill_2 = geompy.MakeQuad2Edges(Arc_6, Line_1)
[geomObj_6,geomObj_7] = geompy.SubShapes(Fill_2, [10, 6])
[Edge_12,Edge_13] = geompy.SubShapes(Fill_2, [10, 6])
Quadrangle_Face_1 = geompy.MakeQuad4Vertices(c21, c24, c23, c22)
[geomObj_8,geomObj_9] = geompy.SubShapes(Quadrangle_Face_1, [6, 3])
[Edge_9,Edge_10] = geompy.SubShapes(Quadrangle_Face_1, [3, 8])
Boundary_2 = geompy.MakeQuad2Edges(Arc_4, Arc_6)
[geomObj_10] = geompy.SubShapes(Boundary_2, [0, 10])
[geomObj_11,geomObj_12] = geompy.SubShapes(Boundary_2, [6, 10])
[geomObj_13] = geompy.SubShapes(Boundary_2, [3])
[geomObj_14] = geompy.SubShapes(Boundary_2, [3])
[Edge_14,Edge_15] = geompy.SubShapes(Boundary_2, [6, 10])
Fill_1 = geompy.MakeQuad2Edges(Arc_5, Line_2)
[geomObj_15,geomObj_16,geomObj_17,geomObj_18] = geompy.ExtractShapes(Fill_1, geompy.ShapeType["EDGE"], True)
[Edge_16,Edge_17] = geompy.SubShapes(Fill_1, [0, 3, 8])
[Edge_18] = geompy.SubShapes(Fill_1, [10])
geomObj_19 = geompy.CreateGroup(Boundary_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(geomObj_19, [3])
geomObj_20 = geompy.CreateGroup(Boundary_2, geompy.ShapeType["EDGE"])
geompy.UnionIDs(geomObj_20, [3])
geomObj_21 = geompy.CreateGroup(Boundary_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(geomObj_21, [6])
geomObj_22 = geompy.CreateGroup(Fill_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(geomObj_22, [6])
geomObj_23 = geompy.CreateGroup(Quadrangle_Face_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(geomObj_23, [3])
geomObj_24 = geompy.CreateGroup(Quadrangle_Face_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(geomObj_24, [6])
geomObj_25 = geompy.CreateGroup(Fill_2, geompy.ShapeType["EDGE"])
geompy.UnionList(geomObj_25, [geomObj_6, geomObj_7])
geomObj_26 = geompy.CreateGroup(Fill_1, geompy.ShapeType["EDGE"])
geompy.UnionList(geomObj_26, [geomObj_16, geomObj_17])
c51 = geompy.MakeVertex("x_corner", "y_near_quarter_step", 0)
Quadrangle_Face_2 = geompy.MakeQuad4Vertices(c22, c23, c51, corner_half)
[Edge_1,Edge_2] = geompy.SubShapes(Quadrangle_Face_2, [8, 3])
c52 = geompy.MakeVertex("x_corner", "half_step", 0)
c53 = geompy.MakeVertex("x_near_quarter_step", "half_step", 0)
v_45 = geompy.MakeVector(O, corner_half)
Lin_1_sym = geompy.MakeMirrorByAxis(Line_1, v_45)
Line_2_sym = geompy.MakeMirrorByAxis(Line_2, v_45)
Quadrangle_Face_3 = geompy.MakeQuad4Vertices(corner_half, c51, c52, c53)
[Edge_3,Edge_4,Edge_5,Edge_6] = geompy.ExtractShapes(Quadrangle_Face_3, geompy.ShapeType["EDGE"], True)
c55 = geompy.MakeVertex("x_base_corner_sym", "half_step", 0)
c54 = geompy.MakeVertex(0, "half_step", 0)
Lin_1_sym_vertex_2 = geompy.GetSubShape(Lin_1_sym, [2])
Quadrangle_Face_4 = geompy.MakeQuad4Vertices(corner_half, c53, c55, Lin_1_sym_vertex_2)
[Edge_7] = geompy.SubShapes(Quadrangle_Face_4, [8])
[geomObj_27] = geompy.SubShapes(Quadrangle_Face_4, [8])
[Edge_8] = geompy.SubShapes(Quadrangle_Face_4, [3])
Line_2_sym_vertex_2 = geompy.GetSubShape(Line_2_sym, [2])
Quadrangle_Face_5 = geompy.MakeQuad4Vertices(Lin_1_sym_vertex_2, c55, Line_2_sym_vertex_2, c54)
wall = geompy.CreateGroup(Boundary_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(wall, [3])
bottom = geompy.CreateGroup(Boundary_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(bottom, [6])
wall_1 = geompy.CreateGroup(Boundary_2, geompy.ShapeType["EDGE"])
geompy.UnionIDs(wall_1, [3])
bottom_1 = geompy.CreateGroup(Fill_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(bottom_1, [6])
bottom_2 = geompy.CreateGroup(Quadrangle_Face_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(bottom_2, [3])
right = geompy.CreateGroup(Quadrangle_Face_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(right, [6])
right_1 = geompy.CreateGroup(Quadrangle_Face_2, geompy.ShapeType["EDGE"])
geompy.UnionIDs(right_1, [6])
right_2 = geompy.CreateGroup(Quadrangle_Face_3, geompy.ShapeType["EDGE"])
geompy.UnionIDs(right_2, [6])
top = geompy.CreateGroup(Quadrangle_Face_3, geompy.ShapeType["EDGE"])
geompy.UnionIDs(top, [8])
top_1 = geompy.CreateGroup(Quadrangle_Face_4, geompy.ShapeType["EDGE"])
geompy.UnionIDs(top_1, [6])
top_2 = geompy.CreateGroup(Quadrangle_Face_5, geompy.ShapeType["EDGE"])
geompy.UnionIDs(top_2, [6])
Auto_group_for_SubMesh_5 = geompy.CreateGroup(Fill_2, geompy.ShapeType["EDGE"])
geompy.UnionList(Auto_group_for_SubMesh_5, [Edge_12, Edge_13])
Auto_group_for_SubMesh_1 = geompy.CreateGroup(Quadrangle_Face_1, geompy.ShapeType["EDGE"])
geompy.UnionList(Auto_group_for_SubMesh_1, [Edge_9, Edge_10])
Auto_group_for_SubMesh_2 = geompy.CreateGroup(Quadrangle_Face_2, geompy.ShapeType["EDGE"])
geompy.UnionList(Auto_group_for_SubMesh_2, [Edge_1, Edge_2])
Auto_group_for_SubMesh_3 = geompy.CreateGroup(Quadrangle_Face_4, geompy.ShapeType["EDGE"])
geompy.UnionList(Auto_group_for_SubMesh_3, [Edge_7, Edge_8])
Auto_group_for_SubMesh_4 = geompy.CreateGroup(Quadrangle_Face_3, geompy.ShapeType["EDGE"])
geompy.UnionList(Auto_group_for_SubMesh_4, [Edge_3, Edge_6])
left = geompy.CreateGroup(Quadrangle_Face_5, geompy.ShapeType["EDGE"])
geompy.UnionIDs(left, [8])
geompy.addToStudy( O, 'O' )
geompy.addToStudy( c01, 'c01' )
geompy.addToStudy( c02, 'c02' )
geompy.addToStudy( Arc_1, 'Arc_1' )
geompy.addToStudy( c11, 'c11' )
geompy.addToStudy( c12, 'c12' )
geompy.addToStudy( corner_half, 'corner_half' )
geompy.addToStudy( c21, 'c21' )
geompy.addToStudy( c22, 'c22' )
geompy.addToStudy( c23, 'c23' )
geompy.addToStudy( c24, 'c24' )
geompy.addToStudy( diag_cut, 'diag_cut' )
geompy.addToStudy( Arc_2, 'Arc_2' )
geompy.addToStudy( c31, 'c31' )
geompy.addToStudy( c32, 'c32' )
geompy.addToStudy( diag_cut_2, 'diag_cut_2' )
geompy.addToStudy( c41, 'c41' )
geompy.addToStudy( c42, 'c42' )
geompy.addToStudy( Arc_3, 'Arc_3' )
geompy.addToStudy( Arc_4, 'Arc_4' )
geompy.addToStudy( Arc_5, 'Arc_5' )
geompy.addToStudy( Arc_6, 'Arc_6' )
geompy.addToStudy( Line_2, 'Line_2' )
geompy.addToStudy( Line_1, 'Line_1' )
geompy.addToStudy( Boundary_1, 'Boundary_1' )
geompy.addToStudyInFather( Boundary_1, Edge_11, 'Edge_11' )
geompy.addToStudy( Fill_2, 'Fill_2' )
geompy.addToStudyInFather( Fill_2, Edge_12, 'Edge_12' )
geompy.addToStudyInFather( Fill_2, Edge_13, 'Edge_13' )
geompy.addToStudy( Quadrangle_Face_1, 'Quadrangle Face_1' )
geompy.addToStudyInFather( Quadrangle_Face_1, Edge_9, 'Edge_9' )
geompy.addToStudyInFather( Quadrangle_Face_1, Edge_10, 'Edge_10' )
geompy.addToStudy( Boundary_2, 'Boundary_2' )
geompy.addToStudyInFather( Boundary_2, Edge_14, 'Edge_14' )
geompy.addToStudyInFather( Boundary_2, Edge_15, 'Edge_15' )
geompy.addToStudy( Fill_1, 'Fill_1' )
geompy.addToStudyInFather( Fill_1, Edge_16, 'Edge_16' )
geompy.addToStudyInFather( Fill_1, Edge_17, 'Edge_17' )
geompy.addToStudyInFather( Fill_1, Edge_18, 'Edge_18' )
geompy.addToStudy( c51, 'c51' )
geompy.addToStudy( Quadrangle_Face_2, 'Quadrangle Face_2' )
geompy.addToStudyInFather( Quadrangle_Face_2, Edge_1, 'Edge_1' )
geompy.addToStudyInFather( Quadrangle_Face_2, Edge_2, 'Edge_2' )
geompy.addToStudy( c52, 'c52' )
geompy.addToStudy( c53, 'c53' )
geompy.addToStudy( v_45, 'v_45' )
geompy.addToStudy( Lin_1_sym, 'Lin_1_sym' )
geompy.addToStudy( Line_2_sym, 'Line_2_sym' )
geompy.addToStudy( Quadrangle_Face_3, 'Quadrangle Face_3' )
geompy.addToStudyInFather( Quadrangle_Face_3, Edge_3, 'Edge_3' )
geompy.addToStudyInFather( Quadrangle_Face_3, Edge_4, 'Edge_4' )
geompy.addToStudyInFather( Quadrangle_Face_3, Edge_5, 'Edge_5' )
geompy.addToStudyInFather( Quadrangle_Face_3, Edge_6, 'Edge_6' )
geompy.addToStudy( c55, 'c55' )
geompy.addToStudy( c54, 'c54' )
geompy.addToStudyInFather( Lin_1_sym, Lin_1_sym_vertex_2, 'Lin_1_sym:vertex_2' )
geompy.addToStudy( Quadrangle_Face_4, 'Quadrangle Face_4' )
geompy.addToStudyInFather( Quadrangle_Face_4, Edge_7, 'Edge_7' )
geompy.addToStudyInFather( Quadrangle_Face_4, Edge_8, 'Edge_8' )
geompy.addToStudyInFather( Line_2_sym, Line_2_sym_vertex_2, 'Line_2_sym:vertex_2' )
geompy.addToStudy( Quadrangle_Face_5, 'Quadrangle Face_5' )
geompy.addToStudyInFather( Boundary_1, wall, 'wall' )
geompy.addToStudyInFather( Boundary_1, bottom, 'bottom' )
geompy.addToStudyInFather( Boundary_2, wall_1, 'wall' )
geompy.addToStudyInFather( Fill_1, bottom_1, 'bottom' )
geompy.addToStudyInFather( Quadrangle_Face_1, bottom_2, 'bottom' )
geompy.addToStudyInFather( Quadrangle_Face_1, right, 'right' )
geompy.addToStudyInFather( Quadrangle_Face_2, right_1, 'right' )
geompy.addToStudyInFather( Quadrangle_Face_3, right_2, 'right' )
geompy.addToStudyInFather( Quadrangle_Face_3, top, 'top' )
geompy.addToStudyInFather( Quadrangle_Face_4, top_1, 'top' )
geompy.addToStudyInFather( Quadrangle_Face_5, top_2, 'top' )
geompy.addToStudyInFather( Fill_2, Auto_group_for_SubMesh_5, 'Auto_group_for_SubMesh_5' )
geompy.addToStudyInFather( Quadrangle_Face_1, Auto_group_for_SubMesh_1, 'Auto_group_for_SubMesh_1' )
geompy.addToStudyInFather( Quadrangle_Face_2, Auto_group_for_SubMesh_2, 'Auto_group_for_SubMesh_2' )
geompy.addToStudyInFather( Quadrangle_Face_4, Auto_group_for_SubMesh_3, 'Auto_group_for_SubMesh_3' )
geompy.addToStudyInFather( Quadrangle_Face_3, Auto_group_for_SubMesh_4, 'Auto_group_for_SubMesh_4' )
geompy.addToStudyInFather( Quadrangle_Face_5, left, 'left' )

### Store presentation parameters of displayed objects
import iparameters
ipar = iparameters.IParameters(theStudy.GetModuleParameters("Interface Applicative", "GEOM", 1))

#Set up entries:
# set up entry GEOM_27 (Quadrangle Face_1) parameters
objId = geompy.getObjectID(Quadrangle_Face_1)
ipar.setParameter(objId, "VTKViewer_0_Color", "1:1:0")
# set up entry GEOM_31 (Quadrangle Face_2) parameters
objId = geompy.getObjectID(Quadrangle_Face_2)
ipar.setParameter(objId, "VTKViewer_0_Color", "1:1:0")
# set up entry GEOM_37 (Quadrangle Face_3) parameters
objId = geompy.getObjectID(Quadrangle_Face_3)
ipar.setParameter(objId, "VTKViewer_0_Color", "1:1:0")
# set up entry GEOM_40 (Quadrangle Face_4) parameters
objId = geompy.getObjectID(Quadrangle_Face_4)
ipar.setParameter(objId, "VTKViewer_0_Color", "1:1:0")
# set up entry GEOM_41 (Quadrangle Face_5) parameters
objId = geompy.getObjectID(Quadrangle_Face_5)
ipar.setParameter(objId, "VTKViewer_0_Color", "1:1:0")
ipar.setParameter(objId, "OCCViewer_2_Color", "1:1:0")
# set up entry GEOM_5 (c11) parameters
objId = geompy.getObjectID(c11)
ipar.setParameter(objId, "VTKViewer_0_Color", "1:1:0")
# set up entry GEOM_6 (c12) parameters
objId = geompy.getObjectID(c12)
ipar.setParameter(objId, "VTKViewer_0_Color", "1:1:0")
ipar.setParameter(objId, "OCCViewer_2_Color", "1:1:0")
# set up entry GEOM_7 (corner_half) parameters
objId = geompy.getObjectID(corner_half)
ipar.setParameter(objId, "VTKViewer_0_Color", "1:1:0")
# set up entry GEOM_8 (c21) parameters
objId = geompy.getObjectID(c21)
ipar.setParameter(objId, "VTKViewer_0_Color", "1:1:0")

###
### SMESH component
###

import SMESH, SALOMEDS

from salome.smesh import smeshBuilder
smesh = smeshBuilder.New()

import StdMeshers
Boundary_1_1 = smesh.Mesh(Boundary_1)
Regular_1D_1 = Boundary_1_1.Segment()
NumberOfSegments_n_wall_1 = Regular_1D_1.NumberOfSegments("n_wall_1")
NumberOfSegments_n_wall_1.SetDistrType( 0 )
Quadrangle_2D_2 = Boundary_1_1.Quadrangle()
Regular_1D_1_1 = Boundary_1_1.Segment(geom=bottom)
NumberOfSegments_n_boundary = Regular_1D_1_1.NumberOfSegments("n_boundary",2,[  ])
Regular_1D_1_2 = Boundary_1_1.Segment(geom=Edge_11)
status = Boundary_1_1.AddHypothesis(NumberOfSegments_n_boundary,Edge_11)
isDone = Boundary_1_1.Compute()
Boundary_2_1 = smesh.Mesh(Boundary_2)
Regular_1D_1_3 = Boundary_2_1.Segment()
NumberOfSegments_n_wall_2 = Regular_1D_1_3.NumberOfSegments("n_wall_2")
NumberOfSegments_n_wall_2.SetDistrType( 0 )
Quadrangle_2D_2_1 = Boundary_2_1.Quadrangle()
Regular_1D_1_4 = Boundary_2_1.Segment(geom=Edge_14)
status = Boundary_2_1.AddHypothesis(NumberOfSegments_n_boundary,Edge_14)
Regular_1D_1_5 = Boundary_2_1.Segment(geom=Edge_15)
status = Boundary_2_1.AddHypothesis(NumberOfSegments_n_boundary,Edge_15)
isDone = Boundary_2_1.Compute()
QuadrangleParams = smesh.CreateHypothesis('QuadrangleParams')
QuadrangleParams.SetQuadType( StdMeshers.QUAD_STANDARD )
Fill_2_1 = smesh.Mesh(Fill_2)
status = Fill_2_1.AddHypothesis(NumberOfSegments_n_wall_2)
Regular_1D_1_6 = Fill_2_1.Segment()
status = Fill_2_1.AddHypothesis(QuadrangleParams)
Quadrangle_2D_2_2 = Fill_2_1.Quadrangle()
ImportSource1D_5 = smesh.CreateHypothesis('ImportSource1D')
Regular_1D_1_7 = Fill_2_1.Segment(geom=Auto_group_for_SubMesh_5)
NumberOfSegments_n_diag = Regular_1D_1_7.NumberOfSegments("n_diag")
NumberOfSegments_n_diag.SetDistrType( 0 )
isDone = Fill_2_1.Compute()
NumberOfSegments_n_diag.SetNumberOfSegments( "n_diag" )
NumberOfSegments_n_diag.SetDistrType( 1 )
NumberOfSegments_n_diag.SetScaleFactor( "mult_diag" )
NumberOfSegments_n_diag.SetReversedEdges( [  ] )
isDone = Fill_2_1.Compute()
[  ] = Fill_2_1.GetMeshOrder()
Fill_2_1.Clear()
isDone = Fill_2_1.Compute()
Fill_1_1 = smesh.Mesh(Fill_1)
status = Fill_1_1.AddHypothesis(NumberOfSegments_n_wall_1)
Regular_1D_1_8 = Fill_1_1.Segment()
status = Fill_1_1.AddHypothesis(QuadrangleParams)
Quadrangle_2D_2_3 = Fill_1_1.Quadrangle()
Regular_1D_1_9 = Fill_1_1.Segment(geom=Edge_16)
status = Fill_1_1.AddHypothesis(NumberOfSegments_n_wall_1,Edge_16)
Regular_1D_1_10 = Fill_1_1.Segment(geom=Edge_17)
status = Fill_1_1.AddHypothesis(NumberOfSegments_n_wall_1,Edge_17)
Regular_1D_1_11 = Fill_1_1.Segment(geom=Edge_18)
status = Fill_1_1.AddHypothesis(NumberOfSegments_n_diag,Edge_18)
Regular_1D_1_12 = Fill_1_1.Segment(geom=bottom_1)
NumberOfSegments_n_fill = Regular_1D_1_12.NumberOfSegments("n_fill_1_bottom",2.5,[  ])
isDone = Fill_1_1.Compute()
Mesh_1 = smesh.Mesh(Quadrangle_Face_1)
status = Mesh_1.AddHypothesis(NumberOfSegments_n_wall_1)
Regular_1D_1_13 = Mesh_1.Segment()
status = Mesh_1.AddHypothesis(QuadrangleParams)
Quadrangle_2D_2_4 = Mesh_1.Quadrangle()
Regular_1D_1_14 = Mesh_1.Segment(geom=Auto_group_for_SubMesh_1)
NumberOfSegments_n_x_corner = Regular_1D_1_14.NumberOfSegments("n_x_corner",[],[  ])
isDone = Mesh_1.Compute()
Mesh_2 = smesh.Mesh(Quadrangle_Face_2)
status = Mesh_2.AddHypothesis(NumberOfSegments_n_wall_2)
Regular_1D_1_15 = Mesh_2.Segment()
status = Mesh_2.AddHypothesis(QuadrangleParams)
Quadrangle_2D_2_5 = Mesh_2.Quadrangle()
Regular_1D_1_16 = Mesh_2.Segment(geom=Auto_group_for_SubMesh_2)
status = Mesh_2.AddHypothesis(NumberOfSegments_n_x_corner,Auto_group_for_SubMesh_2)
isDone = Mesh_2.Compute()
Mesh_3 = smesh.Mesh(Quadrangle_Face_3)
status = Mesh_3.AddHypothesis(NumberOfSegments_n_wall_1)
Regular_1D_1_17 = Mesh_3.Segment()
status = Mesh_3.AddHypothesis(QuadrangleParams)
Quadrangle_2D_2_6 = Mesh_3.Quadrangle()
isDone = Mesh_3.Compute()
status = Mesh_3.RemoveHypothesis(NumberOfSegments_n_wall_1)
status = Mesh_3.AddHypothesis(NumberOfSegments_n_x_corner)
isDone = Mesh_3.Compute()
bottom_3 = Mesh_1.GroupOnGeom(bottom_2,'bottom',SMESH.EDGE)
right_3 = Mesh_1.GroupOnGeom(right,'right',SMESH.EDGE)
right_4 = Mesh_2.GroupOnGeom(right_1,'right',SMESH.EDGE)
right_5 = Mesh_3.GroupOnGeom(right_2,'right',SMESH.EDGE)
top_3 = Mesh_3.GroupOnGeom(top,'top',SMESH.EDGE)
Mesh_4 = smesh.Mesh(Quadrangle_Face_4)
status = Mesh_4.AddHypothesis(NumberOfSegments_n_wall_2)
Regular_1D_1_18 = Mesh_4.Segment()
status = Mesh_4.AddHypothesis(QuadrangleParams)
Quadrangle_2D_2_7 = Mesh_4.Quadrangle()
Regular_1D_1_19 = Mesh_4.Segment(geom=Auto_group_for_SubMesh_3)
status = Mesh_4.AddHypothesis(NumberOfSegments_n_wall_1,Auto_group_for_SubMesh_3)
isDone = Mesh_4.Compute()
Regular_1D_1_20 = Mesh_3.Segment(geom=Auto_group_for_SubMesh_4)
status = Mesh_3.AddHypothesis(NumberOfSegments_n_wall_1,Auto_group_for_SubMesh_4)
isDone = Mesh_3.Compute()
top_4 = Mesh_4.GroupOnGeom(top_1,'top',SMESH.EDGE)
Mesh_5 = smesh.Mesh(Quadrangle_Face_5)
status = Mesh_5.AddHypothesis(NumberOfSegments_n_wall_1)
Regular_1D_1_21 = Mesh_5.Segment()
status = Mesh_5.AddHypothesis(QuadrangleParams)
Quadrangle_2D_2_8 = Mesh_5.Quadrangle()
isDone = Mesh_5.Compute()
top_5 = Mesh_5.GroupOnGeom(top_2,'top',SMESH.EDGE)
smeshObj_1 = smesh.Concatenate([Boundary_1_1.GetMesh(), Boundary_2_1.GetMesh(), Fill_2_1.GetMesh(), Fill_1_1.GetMesh()], 1, 1, 1e-06)
smeshObj_1.MirrorObject( smeshObj_1, SMESH.AxisStruct( 0, 0, 0, 1, 1, 0 ), SMESH.SMESH_MeshEditor.AXIS, 1 )
smeshObj_2 = smesh.Concatenate([Boundary_1_1.GetMesh(), Boundary_2_1.GetMesh(), Fill_2_1.GetMesh(), Fill_1_1.GetMesh()], 1, 1, 1e-06)
smeshObj_3 = smeshObj_2.MirrorObjectMakeMesh( smeshObj_2, SMESH.AxisStruct( 0, 0, 0, 1, 1, 0 ), SMESH.SMESH_MeshEditor.AXIS, 0, 'Compound_Mesh_1_mirrored' )
wall_2 = Boundary_1_1.GroupOnGeom(wall,'wall',SMESH.EDGE)
bottom_4 = Boundary_1_1.GroupOnGeom(bottom,'bottom',SMESH.EDGE)
wall_3 = Boundary_2_1.GroupOnGeom(wall_1,'wall',SMESH.EDGE)
bottom_5 = Fill_1_1.GroupOnGeom(bottom_1,'bottom',SMESH.EDGE)
Compound_Mesh_1 = smesh.Concatenate([Boundary_1_1.GetMesh(), Boundary_2_1.GetMesh(), Fill_2_1.GetMesh(), Fill_1_1.GetMesh()], 1, 1, 1e-06)
[ wall_4, bottom_6 ] = Compound_Mesh_1.GetGroups()
wall_4.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
bottom_6.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
Compound_Mesh_1_mirrored = Compound_Mesh_1.MirrorObjectMakeMesh( Compound_Mesh_1, SMESH.AxisStruct( 0, 0, 0, 1, 1, 0 ), SMESH.SMESH_MeshEditor.AXIS, 1, 'Compound_Mesh_1_mirrored' )
[ wall_5, left_1 ] = Compound_Mesh_1_mirrored.GetGroups()
left_1.SetName( 'left' )
smeshObj_4 = smesh.Concatenate([Mesh_1.GetMesh(), Mesh_2.GetMesh(), Mesh_3.GetMesh(), Mesh_4.GetMesh(), Mesh_5.GetMesh(), Compound_Mesh_1.GetMesh(), Compound_Mesh_1_mirrored.GetMesh()], 1, 1, 1e-06)
[ smeshObj_5, smeshObj_6, smeshObj_7, smeshObj_8, smeshObj_9 ] = smeshObj_4.GetGroups()
smeshObj_4.TranslateObject( smeshObj_4, SMESH.DirStruct( SMESH.PointStruct ( 0, -0.0225, 0 )), 0 )
smeshObj_5.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
smeshObj_10 = smeshObj_4.MirrorObjectMakeMesh( smeshObj_4, SMESH.AxisStruct( 0, 0, 0, 1, 0, 0 ), SMESH.SMESH_MeshEditor.AXIS, 1, 'Compound_Mesh_2_mirrored' )
[ smeshObj_11, smeshObj_12, smeshObj_13, smeshObj_14, smeshObj_15 ] = smeshObj_10.GetGroups()
smeshObj_11.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
smeshObj_11.SetName( 'top' )
smeshObj_13.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
smeshObj_10.RemoveGroup( smeshObj_13 )
smeshObj_4.RemoveGroup( smeshObj_7 )
smeshObj_16 = smesh.Concatenate([smeshObj_4.GetMesh(), smeshObj_10.GetMesh()], 1, 1, 1e-06)
[ smeshObj_17, smeshObj_18, smeshObj_19, smeshObj_20, smeshObj_21 ] = smeshObj_16.GetGroups()
smeshObj_17.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
smeshObj_18.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
smeshObj_19.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
smeshObj_20.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
smeshObj_21.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
left_2 = Mesh_5.GroupOnGeom(left,'left',SMESH.EDGE)
smeshObj_16.RemoveGroup( smeshObj_21 )
smeshObj_16.RemoveGroup( smeshObj_20 )
smeshObj_16.RemoveGroup( smeshObj_19 )
smeshObj_16.RemoveGroup( smeshObj_18 )
smeshObj_16.RemoveGroup( smeshObj_17 )
smeshObj_10.RemoveGroup( smeshObj_15 )
smeshObj_10.RemoveGroup( smeshObj_14 )
smeshObj_10.RemoveGroup( smeshObj_12 )
smeshObj_10.RemoveGroup( smeshObj_11 )
left_2.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
smeshObj_4.RemoveGroup( smeshObj_9 )
smeshObj_4.RemoveGroup( smeshObj_8 )
smeshObj_4.RemoveGroup( smeshObj_6 )
smeshObj_4.RemoveGroup( smeshObj_5 )
Corner_mesh = smesh.Concatenate([Mesh_1.GetMesh(), Mesh_2.GetMesh(), Mesh_3.GetMesh(), Mesh_4.GetMesh(), Mesh_5.GetMesh(), Compound_Mesh_1.GetMesh(), Compound_Mesh_1_mirrored.GetMesh()], 1, 1, 1e-06)
[ bottom_7, right_6, smeshObj_22, left_3, wall_6 ] = Corner_mesh.GetGroups()
bottom_7.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
right_6.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
smeshObj_22.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
left_3.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
wall_6.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
smesh.SetName(Corner_mesh, 'Corner_mesh')
Corner_mesh.ExportMED( r'./corner_x_base.med', 0, SMESH.MED_V2_2, 1 )
tmpPt = geompy.PointCoordinates(c54)
Corner_mesh.TranslateObject( Corner_mesh, SMESH.DirStruct( SMESH.PointStruct ( 0, -tmpPt[1], 0 )), 0 )
Corner_mesh_mirrored = Corner_mesh.MirrorObjectMakeMesh( Corner_mesh, SMESH.AxisStruct( 0, 0, 0, 1, 0, 0 ), SMESH.SMESH_MeshEditor.AXIS, 1, 'Corner_mesh_mirrored' )
[ top_6, right_7, smeshObj_23, left_4, wall_7 ] = Corner_mesh_mirrored.GetGroups()
smeshObj_23.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
Corner_mesh_mirrored.RemoveGroup( smeshObj_23 )
top_6.SetName( 'top' )
Staggered_side_base = smesh.Concatenate([Corner_mesh.GetMesh(), Corner_mesh_mirrored.GetMesh()], 1, 1, 1e-06)
[ bottom_8, right_8, top_7, left_5, wall_8 ] = Staggered_side_base.GetGroups()
smesh.SetName(Staggered_side_base, 'Staggered_side_base')
Staggered_side_base.ExportMED( r'./staggered_side_base.med', 0, SMESH.MED_V2_2, 1 )
SubMesh_3 = Regular_1D_1_19.GetSubMesh()
Regular_1D = Regular_1D_1_1.GetSubMesh()
Regular_1D_2 = Regular_1D_1_2.GetSubMesh()
Regular_1D_3 = Regular_1D_1_4.GetSubMesh()
Regular_1D_4 = Regular_1D_1_5.GetSubMesh()
Regular_1D_5 = Regular_1D_1_7.GetSubMesh()
Regular_1D_6 = Regular_1D_1_9.GetSubMesh()
Regular_1D_7 = Regular_1D_1_10.GetSubMesh()
Regular_1D_8 = Regular_1D_1_11.GetSubMesh()
Regular_1D_9 = Regular_1D_1_12.GetSubMesh()
SubMesh_1 = Regular_1D_1_14.GetSubMesh()
SubMesh_2 = Regular_1D_1_16.GetSubMesh()
SubMesh_4 = Regular_1D_1_20.GetSubMesh()

## some objects were removed
aStudyBuilder = theStudy.NewBuilder()
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_1.GetMesh()))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_2.GetMesh()))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_3.GetMesh()))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_4.GetMesh()))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_5))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_6))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_7))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_8))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_9))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_10.GetMesh()))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_11))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_12))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_13))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_14))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_15))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_16.GetMesh()))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_17))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_18))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_19))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_20))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_21))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_22))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_23))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
## set object names
smesh.SetName(Boundary_1_1.GetMesh(), 'Boundary_1')
smesh.SetName(Regular_1D_1.GetAlgorithm(), 'Regular_1D_1')
smesh.SetName(NumberOfSegments_n_wall_1, 'NumberOfSegments=n_wall_1')
smesh.SetName(Quadrangle_2D_2.GetAlgorithm(), 'Quadrangle_2D_2')
smesh.SetName(NumberOfSegments_n_boundary, 'NumberOfSegments=n_boundary')
smesh.SetName(Boundary_2_1.GetMesh(), 'Boundary_2')
smesh.SetName(NumberOfSegments_n_wall_2, 'NumberOfSegments=n_wall_2')
smesh.SetName(QuadrangleParams, 'QuadrangleParams')
smesh.SetName(Fill_2_1.GetMesh(), 'Fill_2')
smesh.SetName(ImportSource1D_5, 'ImportSource1D_5')
smesh.SetName(NumberOfSegments_n_diag, 'NumberOfSegments=n_diag')
smesh.SetName(Fill_1_1.GetMesh(), 'Fill_1')
smesh.SetName(NumberOfSegments_n_fill, 'NumberOfSegments=n_fill')
smesh.SetName(Mesh_1.GetMesh(), 'Mesh_1')
smesh.SetName(NumberOfSegments_n_x_corner, 'NumberOfSegments=n_x_corner')
smesh.SetName(Mesh_2.GetMesh(), 'Mesh_2')
smesh.SetName(Mesh_3.GetMesh(), 'Mesh_3')
smesh.SetName(bottom_3, 'bottom')
smesh.SetName(right_3, 'right')
smesh.SetName(right_4, 'right')
smesh.SetName(right_5, 'right')
smesh.SetName(top_3, 'top')
smesh.SetName(Mesh_4.GetMesh(), 'Mesh_4')
smesh.SetName(top_4, 'top')
smesh.SetName(Mesh_5.GetMesh(), 'Mesh_5')
smesh.SetName(top_5, 'top')
smesh.SetName(wall_2, 'wall')
smesh.SetName(bottom_4, 'bottom')
smesh.SetName(wall_3, 'wall')
smesh.SetName(bottom_5, 'bottom')
smesh.SetName(Compound_Mesh_1.GetMesh(), 'Compound_Mesh_1')
smesh.SetName(wall_4, 'wall')
smesh.SetName(bottom_6, 'bottom')
smesh.SetName(Compound_Mesh_1_mirrored.GetMesh(), 'Compound_Mesh_1_mirrored')
smesh.SetName(wall_5, 'wall')
smesh.SetName(left_1, 'left')
smesh.SetName(left_2, 'left')
smesh.SetName(Corner_mesh.GetMesh(), 'Corner_mesh')
smesh.SetName(bottom_7, 'bottom')
smesh.SetName(right_6, 'right')
smesh.SetName(left_3, 'left')
smesh.SetName(wall_6, 'wall')
smesh.SetName(Corner_mesh_mirrored.GetMesh(), 'Corner_mesh_mirrored')
smesh.SetName(top_6, 'top')
smesh.SetName(right_7, 'right')
smesh.SetName(left_4, 'left')
smesh.SetName(wall_7, 'wall')
smesh.SetName(Staggered_side_base.GetMesh(), 'Staggered_side_base')
smesh.SetName(bottom_8, 'bottom')
smesh.SetName(right_8, 'right')
smesh.SetName(top_7, 'top')
smesh.SetName(left_5, 'left')
smesh.SetName(wall_8, 'wall')
smesh.SetName(SubMesh_3, 'SubMesh_3')
smesh.SetName(Regular_1D, 'Regular_1D')
smesh.SetName(Regular_1D_2, 'Regular_1D')
smesh.SetName(Regular_1D_3, 'Regular_1D')
smesh.SetName(Regular_1D_4, 'Regular_1D')
smesh.SetName(Regular_1D_5, 'Regular_1D')
smesh.SetName(Regular_1D_6, 'Regular_1D')
smesh.SetName(Regular_1D_7, 'Regular_1D')
smesh.SetName(Regular_1D_8, 'Regular_1D')
smesh.SetName(Regular_1D_9, 'Regular_1D')
smesh.SetName(SubMesh_1, 'SubMesh_1')
smesh.SetName(SubMesh_2, 'SubMesh_2')
smesh.SetName(SubMesh_4, 'SubMesh_4')

### Store presentation parameters of displayed objects
import iparameters
ipar = iparameters.IParameters(theStudy.GetModuleParameters("Interface Applicative", "SMESH", 1))

#Set up entries:
# set up entry SMESH_20 (Corner_mesh) parameters
ipar.setParameter("SMESH_20", "VTKViewer_0_Visibility", "On")
ipar.setParameter("SMESH_20", "VTKViewer_0_Representation", "2")
ipar.setParameter("SMESH_20", "VTKViewer_0_IsShrunk", "0")
ipar.setParameter("SMESH_20", "VTKViewer_0_Entities", "e:1:f:1:v:0")
ipar.setParameter("SMESH_20", "VTKViewer_0_Colors", "surface:0:0.666667:1:backsurface:-100:edge:0:0.666667:1:node:1:0:0:outline:0:0.27451:0")
ipar.setParameter("SMESH_20", "VTKViewer_0_Sizes", "line:1:shrink:0.75")
ipar.setParameter("SMESH_20", "VTKViewer_0_PointMarker", "std:1:9")
ipar.setParameter("SMESH_20", "VTKViewer_0_Opacity", "1")
ipar.setParameter("SMESH_20", "VTKViewer_0_ClippingPlane", "Off")
# set up entry SMESH_22 (Staggered_side_base) parameters
ipar.setParameter("SMESH_22", "VTKViewer_0_Visibility", "On")
ipar.setParameter("SMESH_22", "VTKViewer_0_Representation", "2")
ipar.setParameter("SMESH_22", "VTKViewer_0_IsShrunk", "0")
ipar.setParameter("SMESH_22", "VTKViewer_0_Entities", "e:1:f:1:v:0")
ipar.setParameter("SMESH_22", "VTKViewer_0_Colors", "surface:0:0.666667:1:backsurface:-100:edge:0:0.666667:1:node:1:0:0:outline:0:0.27451:0")
ipar.setParameter("SMESH_22", "VTKViewer_0_Sizes", "line:1:shrink:0.75")
ipar.setParameter("SMESH_22", "VTKViewer_0_PointMarker", "std:1:9")
ipar.setParameter("SMESH_22", "VTKViewer_0_Opacity", "1")
ipar.setParameter("SMESH_22", "VTKViewer_0_ClippingPlane", "Off")


if salome.sg.hasDesktop():
  salome.sg.updateObjBrowser(1)
  iparameters.getSession().restoreVisualState(1)
